<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Chung的個人網誌</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://c0mm1e.github.io/"/>
  <updated>2022-10-18T23:06:10.000Z</updated>
  <id>https://c0mm1e.github.io/</id>
  
  <author>
    <name>Chung</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>論中國的漢字簡化</title>
    <link href="https://c0mm1e.github.io/2022/10/19/%E8%AB%96%E4%B8%AD%E5%9C%8B%E7%9A%84%E6%BC%A2%E5%AD%97%E7%B0%A1%E5%8C%96/"/>
    <id>https://c0mm1e.github.io/2022/10/19/%E8%AB%96%E4%B8%AD%E5%9C%8B%E7%9A%84%E6%BC%A2%E5%AD%97%E7%B0%A1%E5%8C%96/</id>
    <published>2022-10-18T23:06:10.000Z</published>
    <updated>2022-10-18T23:06:10.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>漢字簡化運動在中國曾有過三次官方嘗試，其中僅有一次得以成功施行並沿用至今，即1955年中國文字改革委員會所公佈的《漢字簡化方案草案》（即「一簡字」）<sup><a href="#fn_a" id="reffn_a">a</a></sup>。另外兩次簡化運動，1935年中華民國教育部的《第一批簡體字表》和1977年中國文字改革委員會的《第二次漢字簡化方案（草案）》（即「二簡字」），均因各種原因未能成功推行。</p><p>然而自漢字簡化方案施行以來，對於它的爭議卻從未間斷過。以下列舉了本人在實際生活中所遇到的各類相關問題，並結合各方觀點，以求詳細論證漢字簡化的優劣。</p><h2 id="反對漢字簡化的理由"><a href="#反對漢字簡化的理由" class="headerlink" title="反對漢字簡化的理由"></a>反對漢字簡化的理由</h2><p>簡化字與其所對應的繁體字相比，主要存在如下缺點：</p><h3 id="一-漢字結構被破壞"><a href="#一-漢字結構被破壞" class="headerlink" title="一　漢字結構被破壞"></a>一　漢字結構被破壞</h3><p>漢字的構造基於「六書」這一系統理論<sup><a href="#fn_b" id="reffn_b">b</a></sup>，因而傳統漢字均源出有理，且蘊含其獨特的形和意。大部分漢字在被簡化時並未遵照「六書」理論，從而結構被破壞，無法讀音和解意。以下對「六書」部分條例作關於漢字簡化缺陷的舉例說明（「指事」<sup><a href="#fn_c" id="reffn_c">c</a></sup>所成字普遍筆畫少且高度符號化，因此幾乎沒有被簡化；「轉註」「假借」是用字法<sup><a href="#fn_d" id="reffn_d">d</a></sup>，所成字的簡化與結構破壞無關，因此均不作討論）：</p><center class="half">    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);"     src="許慎.jpg" width = "20%" alt=""/>    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">      許慎（≈30－≈124）      </div></center><h4 id="象形"><a href="#象形" class="headerlink" title="象形"></a>象形</h4><p>象形文來自於圖畫文字，但減弱了圖畫性質，增強了象徵性質。象形是一種最原始的造字方法，其他造字法均以象形文作基礎，拼合、減省或增刪象徵性符號而成。</p><p>大多象形字經簡化後脫離了原本描畫的具體事物的形狀，已不再具「象形」之意。例如「馬」和「鳥」下部的「灬」原為描畫四足，卻簡化為了「<em>一</em>」，成為「<em>马</em>」和「<em>鸟</em>」；「龜」左部兩足甚至直接消失，成為「<em>龟</em>」；左首右尾的「龍」經簡化後成為「<em>龙</em>」，已無一絲龍之形狀。</p><h4 id="形聲"><a href="#形聲" class="headerlink" title="形聲"></a>形聲</h4><p>形聲字由表義之「形符」與表音之「聲符」（與所成字的音不一定完全相同）所構成。</p><p>對形聲字的簡化往往會將其形符或聲符（一般為聲符）改為它字，從而失去形聲意義。一個典型的例子是以「雚$^{ㄍㄨㄢˋ／ㄏㄨㄢˊ}$」為聲符的「觀$^{ㄍㄨㄢ}$」「歡$^{ㄏㄨㄢ}$」<sup><a href="#fn_e" id="reffn_e">e</a></sup>二字，簡化後「雚」成為「<em>又</em>$^{ㄧㄡˋ}$」，已無表音之意。</p><h4 id="會意"><a href="#會意" class="headerlink" title="會意"></a>會意</h4><p>會意字由兩個或多個獨體字<sup><a href="#fn_f" id="reffn_f">f</a></sup>組成，以所組成的字形或字義，合併起來，表達此字的意思。</p><p>對會意字的簡化往往會將其中某一個或多個組成部分改為它字，甚至直接刪去。由於會意字的每一個組成部分均會對其提供一定的意義，組成部分的更動也就造成了解意的困難。例如獨體字「冓$^{ㄍㄡˋ}$」<sup><a href="#fn_g" id="reffn_g">g</a></sup>，《說文解字》：「交積材也。凡冓之屬皆从冓。」，其與獨體字「木」合為「構」字，意為架積交接木材，後又引申為建築之意。然而簡化後「冓」成為「<em>勾</em>」，已無交積之意。值得一提的是，與之相似的「媾$^{ㄍㄡˋ}$」字卻並未被簡化，這也是下文將會提及的簡化標準不統一的一個例證。</p><h3 id="二-多繁對一簡問題"><a href="#二-多繁對一簡問題" class="headerlink" title="二　多繁對一簡問題"></a>二　多繁對一簡問題</h3><p>若要說破壞漢字結構僅會對漢字的溯源和解構造成影響，那麼繁簡字不一一對應所造成的不利影響，則廣泛存在於漢字的實際使用的過程中。在此之中，「多繁對一簡」所產生的問題又比「多簡對一繁」更為突出，因此以下僅對於多繁對一簡問題進行討論。</p><h4 id="意義不清"><a href="#意義不清" class="headerlink" title="意義不清"></a>意義不清</h4><p>當一個漢字的意義增多時，其表意功能也在同時被削弱，這時就更需要依賴上下文才能準確理解其意義。對於一些極端情況，多繁對一簡甚至會造成字詞意義不清，從而引發歧義。例如「<em>船只停在吴港</em>」一句，其中「<em>只</em>」字應該如何理解？若是對應副詞「只$^{ㄓˇ}$」，則表「僅僅、惟一」之意；若是對應量詞「隻$^{ㄓ}$」，則與「船」字組成「船隻」一詞，並沒有「僅僅、惟一」的意思。</p><p>當然，在現代白話文中，這種極端案例並不多見，但在文學古籍等講究精煉用字的領域，一味簡化則很容易造成誤解。典型的例子是「<em>余一人</em>」，若是將其理解為「余一人」，意思是「我一個人」；而若是將其理解為「餘一人」，意思卻變成了「多出一個人」，這種歧義對簡體化後的古文的閱讀造成了相當不利的影響。</p><p>另，在杜甫的詩句「渚清沙白鳥飛迴」<sup><a href="#fn_h" id="reffn_h">h</a></sup>中，表「迴旋、環繞」之意的「迴$^{ㄏㄨㄟˊ}$」一字在簡化被併入了「回」字。許多人在閱讀「<em>渚清沙白鸟飞回</em>」這一簡化後的版本時，若無特別註釋，很容易會將其中「<em>回</em>」字理解為「返、歸」之意，從而無法正確體會詩詞所描寫的情景。</p><p>更罕見的情況是某些不同字不同義的詞語在簡化後變成了同一個詞語。因為這種情況過於少見，因此在實際使用時並無太大影響，以下僅舉兩例用以說明：</p><div class="table-container"><table><thead><tr><th>簡化形式</th><th>繁體形式</th><th>詞義</th><th>相關字</th><th>字義</th></tr></thead><tbody><tr><td><em>托福</em></td><td>託福</td><td>謙詞，用於回話</td><td>託$^{ㄊㄨㄛ}$</td><td>依賴</td></tr><tr><td><em>托福</em></td><td>托福</td><td>TOFEL<sup><a href="#fn_i" id="reffn_i">i</a></sup>的音譯</td><td>托$^{ㄊㄨㄛ}$</td><td>音譯</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th>簡化形式</th><th>繁體形式</th><th>詞義</th><th>相關字</th><th>字義</th></tr></thead><tbody><tr><td><em>白干</em></td><td>白乾</td><td>酒精含量高的蒸餾酒</td><td>乾$^{ㄍㄢ}$</td><td>缺少水分</td></tr><tr><td><em>白干</em></td><td>白幹</td><td>白費力氣</td><td>幹$^{ㄍㄢˋ}$</td><td>做事</td></tr></tbody></table></div><h4 id="人名相關"><a href="#人名相關" class="headerlink" title="人名相關"></a>人名相關</h4><p>從古至今，人們在為後代取名時往往會對其中用字精挑細選，這是因為每個字各自的音、形、意都賦予給整個人名，其中多能體現父輩對後代的期許，蘊含了獨特的意味。因此，變更某一人名中的單字，可能就會曲解其人名的具體含義。這種對於人名粗暴的簡化實際上是對人名的篡改，也是對姓名文化的不尊重。</p><p>比這更嚴重的是對姓氏的篡改。姓氏是人與祖輩聯繫的紐帶，也是探尋祖先起源的重要一物。篡改姓氏，很有可能會導致各種混亂，對相關姓氏的人造成莫大影響。例如《華夏百家姓探源》一書中有提到，「党」和「黨」原本是不同的兩個姓氏，「黨」氏起源於馮翊，祖宗姬氏；「党」氏則是上古聖君夏禹的後裔，支裔世居党項遂姓党氏。<sup><a href="#fn_j" id="reffn_j">j</a></sup>在漢字簡化中「黨」被併入「党」字，從此兩姓不分。</p><p>還有一個更為複雜的例子是「鐘／鍾」字，兩字意義如下：</p><div class="table-container"><table><thead><tr><th>繁體字</th><th>字義</th><th>組詞</th></tr></thead><tbody><tr><td>鐘</td><td>一種中空的響器</td><td>鐘鼎</td></tr><tr><td>鐘</td><td>計時的器具</td><td>鬧鐘</td></tr><tr><td>鍾</td><td>（情感等）集中、積聚</td><td>鍾愛</td></tr></tbody></table></div><p>但是除此之外，兩個字都能作姓氏使用。「鍾」姓由來已久，是春秋時代宋國開國始祖宋微子之後，三國時魏國潁川郡有名人鍾繇、鍾會父子；而「鐘」姓卻是稀有漢姓，主要存在於臺灣等地。</p><p>「鐘」和「鍾」在曾在漢字簡化中被共同歸於單一「<em>钟</em>」字。然而，2013年的新版《通用規範漢字表》由於「鐘（<em>钟</em>）」姓的存在而恢復了「<em>锺</em>」一字（以前曾被歸為異體字）以作「鍾」字作為姓氏人名時的簡化字。在2016年出版的《現代漢語詞典第七版》中，「<em>钟</em>」字已經沒有了姓氏的含義。雖然兩字已分別簡化，但許多原為「鍾」姓的人士繼續沿用「<em>钟</em>」字，且中國簡體媒體及大眾亦普遍不使用「<em>锺</em>」字。不過令人詫異的是，雖然社會對於「<em>钟</em>／<em>锺</em>」的新規範過於冷淡，文學家錢鍾書的名字卻很快在中國的各種簡體書籍和媒體報道中由「<em>钱钟书</em>」變成了「<em>钱锺书</em>」。</p><p>另外，1975年推行的二簡字，更是將「蕭」的一簡字「<em>萧</em>」再度簡化成為「肖」字，造成「蕭／肖」姓氏合併。即使後來二簡字很快就被廢除，這次更動對「蕭」、「肖」兩個氏族造成的影響仍然延續至今。</p><h4 id="簡繁轉換困難"><a href="#簡繁轉換困難" class="headerlink" title="簡繁轉換困難"></a>簡繁轉換困難</h4><p>目前對於簡體字和繁體字，均分別有數個地區<sup><a href="#fn_k" id="reffn_k">k</a></sup>和在地的眾多人口所使用。隨著網路的快速發展和各地間文化交流的不斷加深，簡繁轉換的重要性日益提高。然而，由於中國大陸對漢字簡化時存在多繁對一簡的問題，因此準確的簡繁轉換（尤其是對於電腦軟體）相當困難。以下列舉一些典型的常見字多繁對一簡的情況：「<em>发</em>－發／髮」、「<em>丑</em>－丑／醜」、「<em>复</em>－復／複／覆」、「<em>系</em>－系／係／繫」、「<em>面</em>－面／麵」、「<em>脏</em>－臟／髒」、「<em>淀</em>－淀／澱」、「<em>尽</em>－盡／儘」、「<em>制</em>－制／製」、「<em>冲</em>－沖／衝」。</p><p>除去上述多繁對一簡的情況，還有少數異體字也同樣會在簡繁轉換遇到困難。例如簡體字「<em>勋</em>」，其對應繁體字「勛」和異體字「勳」，一般情況下，將「<em>勋</em>」直接轉換為「勛」是沒有問題的。但是在某些人名中使用的卻是「勳」字，例如「張勳（<em>张勋</em>）」會被錯譯為「張勛」，「習仲勳（<em>习仲勋</em>）」會被錯譯為「習仲勛」等。</p><p>還有一個非常特殊的情況：「計畫」和「計劃」。「畫」為名詞，意「計策、計謀」；「劃」為動詞，意「設計、籌謀」，兩字有顯然的象形意義。雖然在漢字簡化中「畫」和「劃」分別簡化成了「<em>画</em>」和「<em>划</em>」，但名詞「計畫」和動詞「計劃」卻逐漸被歸於「<em>计划</em>」一詞，由此造成該詞繁化的困難。</p><p>近年來，由於機械學習相關領域的快速發展，一些專業的翻譯軟體正在逐漸提升簡繁轉換的正確性。但至少到現在，簡繁轉換仍然是一個沒有得到完全解決的問題。</p><h3 id="三-形似字的大量產生"><a href="#三-形似字的大量產生" class="headerlink" title="三　形似字的大量產生"></a>三　形似字的大量產生</h3><p>許多原來不相似的漢字，在簡化後反而變成形似字，造成辨識困難，例如「<em>风</em>（風）、<em>凤</em>（鳳）」、「<em>闲</em>（閒）、<em>闭</em>（閉）」、「<em>竞</em>（競）、<em>竟</em>（竟）」、「<em>厂</em>（廠）、<em>广</em>（廣）」、「<em>农</em>（農）、<em>衣</em>（衣）」、「<em>旧</em>（舊）、<em>归</em>（歸）」、「<em>异</em>（異）、<em>导</em>（導）、<em>寻</em>（尋）」、「<em>开</em>（開）、<em>升</em>（升）」、「<em>晋</em>（晉）、<em>普</em>（普）」等。這些形似字不僅容易誤寫誤讀，也在一定程度上對剛識字的學生有負面影響。</p><p>除此以外，部分偏旁的簡化也導致了許多形似字的出現。例如偏旁「訁$^{ㄧㄢˊ}$」簡化為「<em>讠</em>$^{ㄧㄢˊ}$」後與偏旁「氵$^{ㄕㄨㄟˇ}$」難以分辨（尤其是在較為潦草的手寫體中），由此也產生了諸如「<em>计</em>（計）、<em>汁</em>（汁）」、「<em>订</em>（訂）、<em>汀</em>（汀）」的形似字。</p><p>當然繁體字中也有形似字（例如「書（<em>书</em>）、晝（<em>昼</em>）、畫（<em>画</em>）」和「興（<em>兴</em>）、與（<em>与</em>）、輿（<em>舆</em>）」，但數量實際上是比簡體字少很多的。這是因為漢字在結構簡化中筆畫減少，導致不同字的區別也變小，形似字也就越容易出現。</p><h3 id="四-字體的美觀"><a href="#四-字體的美觀" class="headerlink" title="四　字體的美觀"></a>四　字體的美觀</h3><p>許多漢字簡化的反對者都認為簡體字打破了原有結構和線條的意義，使得漢字失去了原有的美感。</p><p>對稱結構的字往往具有獨特的美感，然而其中許多字在簡化過程中被改為了非對稱結構，例如「東（<em>东</em>）」、「車（<em>车</em>）」、「畢（<em>毕</em>）」、「華（<em>华</em>）」等字。另有一些字原本擁有緊密結實的結構，卻在簡化後變得支離破碎，例如「網（<em>网</em>）」、「畫（<em>画</em>）」等字。</p><p>有人也許會說美感由主觀判斷，不具普遍性。對於這種反駁，本人認為書法作品是一個很好的例證。即使是在漢字簡化深入中國大陸社會各個角落的今天，作為漢字之美的最佳體現，也少見使用簡體字的書法作品。1992年12月，時任中共中央總書記江澤民對語言文字工作提出了若干意見，重申了官方的一貫態度。其中一條是「書法是一種藝術創作，寫繁體字，還是寫簡化字，應尊重作者的風格和習慣，可以悉聽尊便」，這也可以看作是推行漢字簡化的官方對於繁體書法的讓步。</p><p>當然，必須說明的是，繁體字中亦存在著許多手寫不美觀的字，例如頭重較輕的「覺」、「學」、「興」、「與」等字，以及子結構筆畫過多的「關」、「齡」、「纖」、「獻」、「籌」等字。依照本人的經驗來看，在字號較小的情況下書寫這些字會使得字的不同部位大小不對稱，從而不甚美觀，然而此問題在將字號放大後可以得到顯著改善。</p><h3 id="五-不識繁體字的現象"><a href="#五-不識繁體字的現象" class="headerlink" title="五　不識繁體字的現象"></a>五　不識繁體字的現象</h3><p>由於網路的發達，跨文化交流越趨頻繁，簡體字使用者在研讀古文和與港澳台交流等方面，存在認識繁體字的需求。然而，簡體字使用者普遍未曾受過系統的繁體字教育，他們中的大多數學習繁體字的唯一途徑便是閱覽繁體字的書籍（例如漫畫、小說）和影像（例如電影、電視劇）。這種環境可以使人能夠識別常用的繁體字，卻不能讓他們學會書寫繁體字。</p><p>而且需要注意的是，有些字可能出現於以上學習媒介的概率不太高，但在實際生活中卻很常用，例如「洩」、「膚」、「徵」、「塵」、「驚」、「憑」、「遷」、「繭」、「鬱」等，大部分簡體字使用者都不熟悉甚至不認識。而對於某些更難見到的字，例如「黴」、「釁」、「瓊」、「繡」、「鬨」<sup><a href="#fn_m" id="reffn_m">m</a></sup>等，就幾乎沒有簡體字使用者認識了。</p><p>另外，即使這些人可以識別大部分繁體字，其本質也是因為他們可以根據上下文和包含該字的詞語來進行解讀，並非真正掌握了這些繁體字與簡體字的對應關係，因此也不能算作真正學會了繁體字。</p><h2 id="支持漢字簡化的理由"><a href="#支持漢字簡化的理由" class="headerlink" title="支持漢字簡化的理由"></a>支持漢字簡化的理由</h2><p>許多簡體字大幅減少了繁體字中含有的筆畫，另外因為多繁對一簡的情況，多字兼併而減少了總字數，支持者由此認為簡體字更能夠方便書寫，且能減少記憶，亦更容易學習。</p><p>但實際上簡化字能節省的時間有限，現代人多數情況下均使用電子產品打字輸入，手寫漢字的機會已經減少了許多。即使是手寫時，人們也常用行書或草書連筆書寫漢字，在這種情況下，繁體字的手寫速度比簡體字慢不了多少，簡體字書寫的優勢並不大。另外對於多字兼併這一情況，參看上文的分析，顯然它的缺點是遠遠多於優點的。</p><p>也有支持者認為簡體字易於學習，能夠有效提高識字率，在掃除文盲時發揮了重大作用。這個觀點確實沒錯，但是存在著時間局限性。對於上世紀中期貧弱的中國大陸，若要快速提高民眾識字水平，漢字簡化是幾乎唯一的選擇。但到了社會經濟已經相對發達的今天，這個規則就不再適用了。事實上，識字水平與社會經濟發展及教育的普及提高有很大關係，反而和字體難易程度的關係不是很大。保持繁體字的港澳台，識字率長期遠高大陸的原因，就是因為港澳台整體較中國大陸富裕，政府又投入了大量的人力財力於識字教育。</p><h2 id="本人的觀點"><a href="#本人的觀點" class="headerlink" title="本人的觀點"></a>本人的觀點</h2><p>剛學習繁體字的時候，本人抱持著相對偏激的想法，認為應該全面廢除簡體字，改用繁體字。但在後來不斷的學習生活中，本人意識到簡體字在這半個多世紀的推廣中已經深入了中國大陸的各個角落，此時若要完全棄簡從繁，只怕是會對社會造成不比當年棄繁從簡時小的衝擊。另外，全面棄用簡體字也不會得到已經熟悉簡體字的民眾的廣泛支持。</p><p>因此，本人的觀點開始逐漸偏向漸進式的改良，也即修正現今的簡化政策，以求儘量解決繁簡混亂的現狀。這裡所說的修正，主要是指修改上文中提及的會造成負面影響的部分簡化字案例，而保留其他並無大礙的簡化字，在解決以上所提及問題的同時追求對社會影響的最小化。</p><h2 id="參考書目"><a href="#參考書目" class="headerlink" title="參考書目"></a>參考書目</h2><p>許慎.說文解字：大字本[M].中華書局,2013.7</p><p>徐鍇.說文解字繫傳[M].中華書局,2017.5</p><p>段玉裁.說文解字註[M].中華書局,2013.7</p><p>張學銜.華夏百家姓探源[M].南京大學出版社,2000.1</p><p>中國社會科學院語言研究所詞典編輯室.現代漢語詞典第七版[W].商務印書館,2016.9.</p><p>楊合鳴.簡體字繁體字異體字對照字典[W].崇文書局,2019.10.</p><p>周行健.漢字規範字與繁體字、異體字對照小字典[W].商務印書館,2022.3.</p><p>通用規範漢字表[S].教育部、國家語言文字工作委員會,2013.6</p><p>重編國語辭典修訂本[W].中華民國教育部,1994.9</p><h2 id="備註"><a href="#備註" class="headerlink" title="備註"></a>備註</h2><blockquote id="fn_a"><sup>a</sup>. 若無特別說明，漢字簡化在本文中均指「一簡字」方案。<a href="#reffn_a" title="Jump back to footnote [a] in the text."> &#8617;</a></blockquote><blockquote id="fn_b"><sup>b</sup>. 「六書」一詞最早見於《周禮》：「保氏掌諫王惡，而養國子以道，乃教之六藝：一曰五禮；二曰六樂；三曰五射；四曰五馭；五曰六書；六曰九數。」，但《周禮》並未說明「六書」具體所指。後世學者對於六書的條例有不同的解釋方法，本文以許慎在《說文解字》中的相關解釋為準。許慎在书中指「六書」為「指事、象形、形聲、會意、轉注、假借」，並附解釋和字例：「指事者，視而可識，察而見意，上下是也。二曰象形。象形者，畫成其物，隨體詰詘，日月是也。三曰形聲。形聲者，以事為名，取譬相成，江河是也。四曰會意。會意者，比類合誼，以見指撝，武信是也。五曰轉注。轉注者，建類一首，同意相受，考老是也。六曰假借。假借者，本無其事，依聲託事，令長是也」。<a href="#reffn_b" title="Jump back to footnote [b] in the text."> &#8617;</a></blockquote><blockquote id="fn_c"><sup>c</sup>. 指事是用象征性的符號來表示一個事物的意義或在象形字上添加一個符號表示一種新的意義的造字法。有的指事字是全由記號構成的，例如許慎所舉「上、下」兩例（「上、下」兩字在《說文解字》中的古字形為「丄、丅」），都由橫豎兩道的相對位置來表達上或下的方位概念；而有的指事字是在成字部件（大多是象形字）上增加記號構成的，其中記號起指示字義的作用，例如在「刀」刃部加「丶」指示刀刃的位置，是為「刃」字；或是在「木」的不同位置加「一」：下部加「一」指示樹根的位置，是為「本」字；中部加「一」指示樹幹的位置，是為「朱」字（「朱」為「株」之本字）；上部加「一」指示樹梢的位置，是為「末」字。<a href="#reffn_c" title="Jump back to footnote [c] in the text."> &#8617;</a></blockquote><blockquote id="fn_d"><sup>d</sup>. 一般認為，象形、指事是「造字法」，會意、形聲是「組字法」，轉注、假借是「用字法」。<a href="#reffn_d" title="Jump back to footnote [d] in the text."> &#8617;</a></blockquote><blockquote id="fn_e"><sup>e</sup>.  關於「歡」之形符「欠」，徐鍇《說文解字繫傳》有云：「喜動聲氣，故从欠」。<a href="#reffn_e" title="Jump back to footnote [e] in the text."> &#8617;</a></blockquote><blockquote id="fn_f"><sup>f</sup>. 「獨體字」即「六書」中的象形字和指事字，與「合體字」相對。<a href="#reffn_f" title="Jump back to footnote [f] in the text."> &#8617;</a></blockquote><blockquote id="fn_g"><sup>g</sup>. 「冓」為「遘$^{ㄍㄡˋ}$」之本字。<a href="#reffn_g" title="Jump back to footnote [g] in the text."> &#8617;</a></blockquote><blockquote id="fn_h"><sup>h</sup>. 出自杜甫《登高》，《全唐詩》卷二百二十七。<a href="#reffn_h" title="Jump back to footnote [h] in the text."> &#8617;</a></blockquote><blockquote id="fn_i"><sup>i</sup>. 一種針對非英語系國家留學生舉行的英語能力測驗，為英語「Test of English as a Foreign Language」的縮寫。<a href="#reffn_i" title="Jump back to footnote [i] in the text."> &#8617;</a></blockquote><blockquote id="fn_j"><sup>j</sup>. 馮翊$^{ㄈㄥˊ ㄧˋ}$、党項均是古地名。<a href="#reffn_j" title="Jump back to footnote [j] in the text."> &#8617;</a></blockquote><blockquote id="fn_k"><sup>k</sup>. 繁體字主要使用於台灣、香港、澳門等地，而簡體字主要使用於中國大陸、新加坡、馬來西亞以及緬北等地。<a href="#reffn_k" title="Jump back to footnote [k] in the text."> &#8617;</a></blockquote><blockquote id="fn_l"><sup>l</sup>. 臺灣讀作「髮$^{ㄈㄚˇ}$」。<a href="#reffn_l" title="Jump back to footnote [l] in the text."> &#8617;</a></blockquote><blockquote id="fn_m"><sup>m</sup>. 「鬨$^{ㄏㄨㄥˋ}$」在中國大陸是「<em>哄</em>$^{ㄏㄨㄥˋ}$」的異體字，在臺灣是正字。<a href="#reffn_m" title="Jump back to footnote [m] in the text."> &#8617;</a></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot;
        
      
    
    </summary>
    
    
      <category term="語言" scheme="https://c0mm1e.github.io/categories/%E8%AA%9E%E8%A8%80/"/>
    
    
      <category term="漢字" scheme="https://c0mm1e.github.io/tags/%E6%BC%A2%E5%AD%97/"/>
    
  </entry>
  
  <entry>
    <title>Python實現DH金鑰協商算法中的解密過程</title>
    <link href="https://c0mm1e.github.io/2020/05/27/Python%E5%AF%A6%E7%8F%BEDH%E9%87%91%E9%91%B0%E5%8D%94%E5%95%86%E7%AE%97%E6%B3%95%E4%B8%AD%E7%9A%84%E8%A7%A3%E5%AF%86%E9%81%8E%E7%A8%8B/"/>
    <id>https://c0mm1e.github.io/2020/05/27/Python%E5%AF%A6%E7%8F%BEDH%E9%87%91%E9%91%B0%E5%8D%94%E5%95%86%E7%AE%97%E6%B3%95%E4%B8%AD%E7%9A%84%E8%A7%A3%E5%AF%86%E9%81%8E%E7%A8%8B/</id>
    <published>2020-05-27T07:23:59.000Z</published>
    <updated>2020-05-27T07:23:59.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>DH金鑰協商是一種建立金鑰的方法，而不是加密方法，由White field與Martin Hellman在1976年共同提出。下文先簡要介紹DH金鑰協商的原理，再介紹如何使用Python進行解密。</p><h1 id="建立金鑰"><a href="#建立金鑰" class="headerlink" title="建立金鑰"></a>建立金鑰</h1><p>任取大質數$q$，所有的運算都在$\mathbb Z_q$中進行。</p><p>假設發送方為Alice，接收方為Bob，雙方約定公開的DH參數$(q,g)$。</p><p>Alice選擇私鑰$a$，並計算公鑰$A=g^a\ ({\rm mod}\ q)$。</p><p>Bob選擇私鑰$b$，並計算公鑰$B=g^b\ ({\rm mod}\ q)$。</p><p>Alice和Bob分別通過$s=B^a\ ({\rm mod}\ q)$和$s=A^b\ ({\rm mod}\ q)$計算金鑰$s$。（由$B^a=g^{ab}=A^b\ ({\rm mod}\ q)$可確保Alice和Bob計算出的$s$是相同的）</p><ul><li>$q,g,A,B$是公開的，$a$只有Alice知道，$b$只有Bob知道。</li></ul><h1 id="解密"><a href="#解密" class="headerlink" title="解密"></a>解密</h1><p>DH金鑰協商只能通過遍歷解密，即對$a$（或$b$）進行從$1$至$q$的遍歷並逐一驗算是否滿足$A=g^a\ ({\rm mod}\ q)$。</p><p>代碼如下（其中的EEA和SAM已在《Python實現RSA算法的解密》中提及，不再贅述）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">eea</span><span class="params">(a,b)</span>:</span> </span><br><span class="line">    x,x1=<span class="number">1</span>,<span class="number">0</span></span><br><span class="line">    y,y1=<span class="number">0</span>,<span class="number">1</span></span><br><span class="line">    r,r1=a,b </span><br><span class="line">    <span class="keyword">if</span> b==<span class="number">0</span>: </span><br><span class="line">        <span class="keyword">return</span> a,<span class="number">1</span>,<span class="number">0</span>  </span><br><span class="line">    <span class="keyword">while</span> r1!=<span class="number">0</span>:</span><br><span class="line">        q=r//r1</span><br><span class="line">        r,r1=r1,r-q*r1</span><br><span class="line">        x,x1=x1,x-q*x1</span><br><span class="line">        y,y1=y1,y-q*y1</span><br><span class="line">    <span class="comment"># r is gcd(a,b)</span></span><br><span class="line">    <span class="comment"># ax+by=r</span></span><br><span class="line">    <span class="keyword">return</span> r,x,y</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sam</span><span class="params">(a,e,n)</span>:</span></span><br><span class="line">    k=len(bin(e))<span class="number">-2</span></span><br><span class="line">    remainder=<span class="number">1</span></span><br><span class="line">    x=a </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(k): </span><br><span class="line">        <span class="keyword">if</span> bin(e)[-i<span class="number">-1</span>]==<span class="string">"1"</span>: </span><br><span class="line">            remainder*=x </span><br><span class="line">        x=x**<span class="number">2</span>%n </span><br><span class="line">    <span class="keyword">return</span> remainder%n</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dhke</span><span class="params">(q,g,A,B,limit)</span>:</span> </span><br><span class="line">    a=<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> sam(g,a,q)!=A <span class="keyword">and</span> a&lt;=limit: </span><br><span class="line">        a+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> a&gt;limit:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span> </span><br><span class="line">    <span class="keyword">return</span> sam(B,a,q)</span><br></pre></td></tr></table></figure><h2 id="例題"><a href="#例題" class="headerlink" title="例題"></a>例題</h2><p>假設Alice和Bob通過DH金鑰協商交換了$(q,g,A,B)$，求生成的金鑰$s$。特別地，${\rm log}_gA,{\rm log}_gB\leqslant 10^4$。$(q,g,A,B)$如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">q=<span class="number">179769313486231590772930519078902473361797697894230657273430081157732675805500963132708477322407536021120113879871393357658789768814416622492847430639474124377767893424865485276302219601246094119453082952085005768838150682342462881473913110540827237163350510684586298239947245938479716304835356329624227998859</span></span><br><span class="line">g=<span class="number">3</span></span><br><span class="line">A=<span class="number">112983575163002618947589666666735428181684517845144875096902910066434723952623016603393212501214127399908823223492478725971266042754892798177781267512821607470545283059472689034731313027619864228688466438258327552045437590203790635506728603774799021127049872571983254506993921153718739796769296097404717448108</span></span><br><span class="line">B=<span class="number">111772767805210239496365191691516881043394988196297062013853646674574743401042736447328886156429629192691601526398366088012736749454626686281467579205675084461989494513294624066074137247913037330040487275346913253345733429767781900977102687185378411660147190296412313303321533586102552123457499563789255321369</span></span><br></pre></td></tr></table></figure><p>使用代碼</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(dhke(q,g,A,B,<span class="number">10000</span>))</span><br></pre></td></tr></table></figure><p>可得</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s=<span class="number">10828112783453462381041707802056149866596392072243903940987459672779260675319522663099080388770903982546250524992420350200207624327420612300170620802665302905750045777684348125827484365007590718638373187936889967309324722655294992225815410914105072210725045953105019352457540772995508978315699107247398350128</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot;
        
      
    
    </summary>
    
    
      <category term="技術" scheme="https://c0mm1e.github.io/categories/%E6%8A%80%E8%A1%93/"/>
    
    
      <category term="Python" scheme="https://c0mm1e.github.io/tags/Python/"/>
    
      <category term="算法" scheme="https://c0mm1e.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="密碼學" scheme="https://c0mm1e.github.io/tags/%E5%AF%86%E7%A2%BC%E5%AD%B8/"/>
    
  </entry>
  
  <entry>
    <title>Python實現Shamir金鑰分享算法中的解密過程</title>
    <link href="https://c0mm1e.github.io/2020/05/26/Python%E5%AF%A6%E7%8F%BEShamir%E9%87%91%E9%91%B0%E5%88%86%E4%BA%AB%E7%AE%97%E6%B3%95%E4%B8%AD%E7%9A%84%E8%A7%A3%E5%AF%86%E9%81%8E%E7%A8%8B/"/>
    <id>https://c0mm1e.github.io/2020/05/26/Python%E5%AF%A6%E7%8F%BEShamir%E9%87%91%E9%91%B0%E5%88%86%E4%BA%AB%E7%AE%97%E6%B3%95%E4%B8%AD%E7%9A%84%E8%A7%A3%E5%AF%86%E9%81%8E%E7%A8%8B/</id>
    <published>2020-05-26T06:01:56.000Z</published>
    <updated>2020-05-26T06:01:56.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Shamir的$(k,n)$金鑰分享算法將祕密分為$n$個子祕密，任意$k$個子祕密都可以恢復出$s$，而任意$k-1$個子祕密無法恢復出$s$。</p><p>Shamir金鑰分享算法（TSSS）最早由Shamir和Blackly在1970年基於Lagrange插值法提出。下文先簡要介紹Shamir金鑰分享算法加密的原理，再介紹如何使用Python進行解密。</p><h1 id="TSSS算法的加密"><a href="#TSSS算法的加密" class="headerlink" title="TSSS算法的加密"></a>TSSS算法的加密</h1><p>Shamir的$(k,n)$金鑰分享算法將祕密分為$n$個子祕密，任意$k$個子祕密都可以恢復密文$s$，而任意小於$k$個子祕密無法得到$s$的任何訊息。</p><h2 id="構造多項式"><a href="#構造多項式" class="headerlink" title="構造多項式"></a>構造多項式</h2><p>第一步：對於密文$s$，設其滿足$s\in\mathbb Z_p$，其中$p&gt;k$。（確保所有的運算都在有限域$\mathbb Z_p$中進行）</p><p>第二步：令$a_0=s$，並任取$k-1$個整數$a_1,a_2,…,a_{k-1}\in\mathbb Z_p$。</p><p>第三步：定義多項式$f(x)=\sum\limits^{k-1}_{i=0} {a_ix^i}({\rm mod}\ p)$。</p><h2 id="分發金鑰"><a href="#分發金鑰" class="headerlink" title="分發金鑰"></a>分發金鑰</h2><p>第一步：任取$n$個數$x_1,x_2,…,x_n$，分別計算$f(x_1),f(x_2),…,f(x_n)$。（一般可取$x_i=i$）</p><p>第二步：對於$n$個對象$P_1,P_2,…,P_n$。$\forall 1\leqslant i\leqslant n$，將$(x_i,f(x_i))$發送給$P_i$。</p><h1 id="TSSS算法的解密"><a href="#TSSS算法的解密" class="headerlink" title="TSSS算法的解密"></a>TSSS算法的解密</h1><p>首先，我們需要了解Lagrange插值法。</p><h2 id="Lagrange插值法"><a href="#Lagrange插值法" class="headerlink" title="Lagrange插值法"></a>Lagrange插值法</h2><p>對於$n+1$個數值對$(x_0,y_0),(x_1,y_1),…,(x_n,y_n)$（其中$x_i$互不相同），有且僅有一個次數不超過$n$的多項式$L(x)$對$\forall 0\leqslant i\leqslant n$，$L(x_i)=y_i$，此多項式即為Lagrange插值多項式，其表達式為：</p><p>$L(x)=\sum\limits^n_{j=0} {y_jl_j(x)}$</p><p>其中$l_j(x)$為Lagrange基本多項式，其表達式為：</p><p>$l_j(x)=\prod\limits^n_{i\not =j} {\frac {x-x_i} {x_j-x_i} }\ (0\leqslant j\leqslant n)$</p><p>可以注意到，$l_j(x_i)=\begin{cases} 1\ (i=j)\\0\ (i\not=j) \end{cases}\ (0\leqslant i\leqslant n)$。</p><h2 id="解密"><a href="#解密" class="headerlink" title="解密"></a>解密</h2><p>設現已有$k$個對象$P_{i_1},P_{i_2},…,P_{i_k}$的數據$(x_{i_1},f(x_{i_1})),(x_{i_2},f(x_{i_2})),…,(x_{i_k},f(x_{i_k}))$。</p><p>由於多項式$f(x)$的次數不超過$k-1$，又有對應的$k$個數值對，因此$f(x)$為Lagrange插值多項式。</p><p>$f(x)=\sum\limits^k_{j=1} {(f(x_{i_j})\prod\limits^k_{m\not =j} {\frac {x-x_{i_m}} {x_{i_j}-x_{i_m}} )} }$</p><p>（注意：Lagrange基本多項式的除法是在$\mathbb Z_p$中的，即等價於乘以除數的逆）</p><p>代碼如下（其中的EEA已在<a href="/2020/05/07/Python實現RSA算法中的解密過程">Python實現RSA算法中的解密過程</a>中提及，不再贅述）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">eea</span><span class="params">(a,b)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> b==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> a,<span class="number">1</span>,<span class="number">0</span></span><br><span class="line">    r,x,y=eea(b,a%b)</span><br><span class="line">    <span class="comment"># ax+by=r</span></span><br><span class="line">    <span class="comment"># return r,x,y successively</span></span><br><span class="line">    <span class="keyword">return</span> r,y,x-a//b*y</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tsss</span><span class="params">(s_dict,n,k,p)</span>:</span></span><br><span class="line">    <span class="comment"># s_dict is </span></span><br><span class="line">    s=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n): </span><br><span class="line">        up=<span class="number">1</span></span><br><span class="line">        down=<span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(n): </span><br><span class="line">            <span class="keyword">if</span> i!=j: </span><br><span class="line">                up*=-s_dict[j][<span class="number">0</span>]</span><br><span class="line">                down*=s_dict[i][<span class="number">0</span>]-s_dict[j][<span class="number">0</span>]</span><br><span class="line">        delta=(up*eea(down,p)[<span class="number">1</span>])%p</span><br><span class="line">        s+=delta*s_dict[i][<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">return</span> s%p</span><br><span class="line"><span class="comment"># There is a testcase below</span></span><br><span class="line">print(tsss([(<span class="number">1</span>,<span class="number">8</span>),(<span class="number">3</span>,<span class="number">10</span>),(<span class="number">5</span>,<span class="number">11</span>)],<span class="number">3</span>,<span class="number">5</span>,<span class="number">17</span>)) <span class="comment"># It prints 13</span></span><br></pre></td></tr></table></figure><h2 id="例題"><a href="#例題" class="headerlink" title="例題"></a>例題</h2><p>解密由Shamir的$(5,9)$金鑰分享算法加密的密文$s\in\mathbb Z_{1125899906900597}$。所有子密碼擁有者的數據如下：</p><div class="table-container"><table><thead><tr><th>$i$</th><th>$s_i$</th></tr></thead><tbody><tr><td>1</td><td>75044643784737</td></tr><tr><td>2</td><td>940519894412855</td></tr><tr><td>3</td><td>941263003333598</td></tr><tr><td>4</td><td>736739711411826</td></tr><tr><td>5</td><td>254180887785524</td></tr><tr><td>6</td><td>940382343666996</td></tr><tr><td>7</td><td>132205297839880</td></tr><tr><td>8</td><td>63775631863924</td></tr><tr><td>9</td><td>1111084448671404</td></tr></tbody></table></div><p>使用代碼</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s_dict=[(<span class="number">1</span>,<span class="number">75044643784737</span>),(<span class="number">2</span>,<span class="number">940519894412855</span>),(<span class="number">3</span>,<span class="number">941263003333598</span>),(<span class="number">4</span>,<span class="number">736739711411826</span>),(<span class="number">5</span>,<span class="number">254180887785524</span>),(<span class="number">6</span>,<span class="number">940382343666996</span>),(<span class="number">7</span>,<span class="number">132205297839880</span>),(<span class="number">8</span>,<span class="number">63775631863924</span>),(<span class="number">9</span>,<span class="number">1111084448671404</span>)]</span><br><span class="line">p=<span class="number">1125899906900597</span></span><br><span class="line">print(tsss(s_dict,<span class="number">5</span>,<span class="number">9</span>,p))</span><br></pre></td></tr></table></figure><p>可得</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s=<span class="number">330836359559300</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot;
        
      
    
    </summary>
    
    
      <category term="技術" scheme="https://c0mm1e.github.io/categories/%E6%8A%80%E8%A1%93/"/>
    
    
      <category term="Python" scheme="https://c0mm1e.github.io/tags/Python/"/>
    
      <category term="算法" scheme="https://c0mm1e.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="密碼學" scheme="https://c0mm1e.github.io/tags/%E5%AF%86%E7%A2%BC%E5%AD%B8/"/>
    
  </entry>
  
  <entry>
    <title>Wallpaper Engine中圖片檔案的提取</title>
    <link href="https://c0mm1e.github.io/2020/05/15/Wallpaper%20Engine%E4%B8%AD%E5%9C%96%E7%89%87%E6%AA%94%E6%A1%88%E7%9A%84%E6%8F%90%E5%8F%96/"/>
    <id>https://c0mm1e.github.io/2020/05/15/Wallpaper%20Engine%E4%B8%AD%E5%9C%96%E7%89%87%E6%AA%94%E6%A1%88%E7%9A%84%E6%8F%90%E5%8F%96/</id>
    <published>2020-05-15T05:34:41.000Z</published>
    <updated>2020-05-15T05:34:41.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>推薦訪問如下網頁（侵刪）：</p><p><a href="http://blog.repeater.vip/?p=196" target="_blank" rel="noopener">http://blog.repeater.vip/?p=196</a></p><p>Wallpaper Engine對於場景類（Scene）壁紙是使用以pkg為後綴的加密包儲存的（此處的pkg與塞班系統的pkg無關），連結中的pkg解包程序可以直接提取所有源檔案。</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot;
        
      
    
    </summary>
    
    
      <category term="軟體使用" scheme="https://c0mm1e.github.io/categories/%E8%BB%9F%E9%AB%94%E4%BD%BF%E7%94%A8/"/>
    
    
      <category term="Wallpaper Engine" scheme="https://c0mm1e.github.io/tags/Wallpaper-Engine/"/>
    
  </entry>
  
  <entry>
    <title>Python中獲取絕對路徑的方法</title>
    <link href="https://c0mm1e.github.io/2020/05/15/Python%E4%B8%AD%E7%8D%B2%E5%8F%96%E7%B5%95%E5%B0%8D%E8%B7%AF%E5%BE%91%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>https://c0mm1e.github.io/2020/05/15/Python%E4%B8%AD%E7%8D%B2%E5%8F%96%E7%B5%95%E5%B0%8D%E8%B7%AF%E5%BE%91%E7%9A%84%E6%96%B9%E6%B3%95/</id>
    <published>2020-05-14T19:13:51.000Z</published>
    <updated>2020-05-14T19:13:51.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>首先，相對路徑即是py文件所在資料夾的路徑，例如在以下目錄中，<code>1.txt</code>關於<code>1.py</code>的相對路徑即為<code>1.txt</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">├── 1.py</span><br><span class="line">├── 1.txt</span><br></pre></td></tr></table></figure><p>雖然相對路徑在PowerShell等大部分環境下可以被有效識別，不過在某些環境（例如VScode）下，使用相對路徑卻有可能出現報錯。</p><p>實際上，相對路徑的相容性並不高，這時使用絕對路徑便可以解決這些問題。這裡提供兩種得到絕對路徑的方法。以上文的<code>1.py</code>和<code>1.txt</code>為例：</p><ol><li><p>使用<code>sys.path</code></p><p><code>sys</code>模組包含了與Python解釋器和它的環境有關的函數，而<code>sys.path</code>是模組搜索路徑的字串列表，其中的第一項<code>path[0]</code>包含用來調用Python解釋器的腳本的目錄。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">absolute_path=sys.path[<span class="number">0</span>]+<span class="string">'/'</span>+relative_path</span><br></pre></td></tr></table></figure></li><li><p>使用<code>globals()</code></p><p><code>globals()</code>是Python的一個內建函數，其返回儲存有訪問全局變數的方式的字典，而<code>&#39;__file__&#39;</code>鍵所對應的值即是py文件的絕對路徑。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">absolute_path=globals()[<span class="string">'__file__'</span>][:len(globals()[<span class="string">'__file__'</span>])-globals()[<span class="string">'__file__'</span>][::<span class="number">-1</span>].find(<span class="string">'\\'</span>)]+relative_path</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot;
        
      
    
    </summary>
    
    
      <category term="技術" scheme="https://c0mm1e.github.io/categories/%E6%8A%80%E8%A1%93/"/>
    
    
      <category term="Python" scheme="https://c0mm1e.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python實現RSA算法中的解密過程</title>
    <link href="https://c0mm1e.github.io/2020/05/07/Python%E5%AF%A6%E7%8F%BERSA%E7%AE%97%E6%B3%95%E4%B8%AD%E7%9A%84%E8%A7%A3%E5%AF%86%E9%81%8E%E7%A8%8B/"/>
    <id>https://c0mm1e.github.io/2020/05/07/Python%E5%AF%A6%E7%8F%BERSA%E7%AE%97%E6%B3%95%E4%B8%AD%E7%9A%84%E8%A7%A3%E5%AF%86%E9%81%8E%E7%A8%8B/</id>
    <published>2020-05-07T02:31:08.000Z</published>
    <updated>2020-05-07T02:31:08.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>RSA加密算法是一種非對稱加密算法，由Ron Rivest、Adi Shamir和Leonard Adleman在1977年共同提出。下文先簡要介紹RSA加密的原理，再介紹如何使用Python進行解密。</p><h1 id="RSA算法的加密"><a href="#RSA算法的加密" class="headerlink" title="RSA算法的加密"></a>RSA算法的加密</h1><h2 id="生成公鑰和私鑰"><a href="#生成公鑰和私鑰" class="headerlink" title="生成公鑰和私鑰"></a>生成公鑰和私鑰</h2><p>第一步：任取不相等的兩質數$p,q$。（此處$p,q$的大小決定了破譯難度）</p><p>第二步：$n=pq$。（$n$的二進位制的長度即為金鑰長度)</p><p>第三步：計算$n$的Euler函數$φ(n) = (p-1)(q-1)$。</p><p>第四步：任取整數$e$滿足$1&lt;e&lt;φ(n)$，且$e$與$φ(n)$互質。</p><p>第五步：計算出$e$對於$φ(n)$的模反元素$d$。</p><p>第六步：公鑰為$(n,e)$，私鑰為$(n,d)$。</p><h2 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h2><p>第一步：取需要加密的整數$m$。（此處$m&lt;n$）（若要加密字串等，可用ASCII編碼先轉化為整數）</p><p>第二步：密文$c\equiv m^e({\rm mod}\ n)$。</p><ul><li>$n,e,c$是公開的，$p,q,φ(n),d,m$是私密的。</li></ul><h1 id="RSA算法的解密"><a href="#RSA算法的解密" class="headerlink" title="RSA算法的解密"></a>RSA算法的解密</h1><p>首先，我們需要了解以下兩個算法：</p><h2 id="擴展Euclidean算法-EEA"><a href="#擴展Euclidean算法-EEA" class="headerlink" title="擴展Euclidean算法 (EEA)"></a>擴展Euclidean算法 (EEA)</h2><p>對於兩正整數$a,b$，我們有Euclidean算法（即輾轉相除法）來計算$gcd(a,b)$：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gcd</span><span class="params">(a,b)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> b==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> gcd(b,a%b)</span><br></pre></td></tr></table></figure><p>由Bézout定理可知，存在整數$x,y$使得$ax+by=gcd(a,b)$成立。</p><p>相較於Euclidean算法，擴展Euclidean算法除了計算$gcd(a,b)$，還會得到$x,y$的值。</p><p>代碼如下：</p><p>（非遞迴）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">eea</span><span class="params">(a,b)</span>:</span> </span><br><span class="line">    x,x1=<span class="number">1</span>,<span class="number">0</span></span><br><span class="line">    y,y1=<span class="number">0</span>,<span class="number">1</span></span><br><span class="line">    r,r1=a,b </span><br><span class="line">    <span class="keyword">if</span> b==<span class="number">0</span>: </span><br><span class="line">        <span class="keyword">return</span> a,<span class="number">1</span>,<span class="number">0</span>  </span><br><span class="line">    <span class="keyword">while</span> r1!=<span class="number">0</span>:</span><br><span class="line">        q=r//r1</span><br><span class="line">        r,r1=r1,r-q*r1</span><br><span class="line">        x,x1=x1,x-q*x1</span><br><span class="line">        y,y1=y1,y-q*y1</span><br><span class="line">    <span class="comment"># r is gcd(a,b)</span></span><br><span class="line">    <span class="comment"># ax+by=r</span></span><br><span class="line">    <span class="keyword">return</span> r,x,y</span><br></pre></td></tr></table></figure><p>（遞迴）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">eea</span><span class="params">(a,b)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> b==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> a,<span class="number">1</span>,<span class="number">0</span></span><br><span class="line">    r,x,y=eea(b,a%b)</span><br><span class="line">    <span class="comment"># ax+by=r</span></span><br><span class="line">    <span class="comment"># return r,x,y successively</span></span><br><span class="line">    <span class="keyword">return</span> r,y,x-a//b*y</span><br></pre></td></tr></table></figure><h2 id="Square-and-Multiply算法-SAMA"><a href="#Square-and-Multiply算法-SAMA" class="headerlink" title="Square-and-Multiply算法 (SAMA)"></a>Square-and-Multiply算法 (SAMA)</h2><p>對於三正整數$a,e,n$，我們有Square-and-Multiply算法來計算$a^e({\rm mod}\ n)$，其原理是：</p><p>取$e$的二進位制$e=(e_{k-1}…e_0)_2$（其中$k$為$e$的二進位制的長度），則有$e=\sum^{k-1}_{i=0}{e_i\cdot 2^i}$。</p><p>$x_0=a$</p><p>$x_1=(x_0^2\ {\rm mod}\ n)=(a^2\ {\rm mod}\ n)$</p><p>$…$</p><p>$x_i=(x_{i-1}^2\ {\rm mod}\ n)=(a^{2^i}\ {\rm mod}\ n)$</p><p>$…$</p><p>$x_{k-1}=(x_{k-2}^2\ {\rm mod}\ n)=(a^{2^{k-1} }\ {\rm mod}\ n)$</p><p>由此可得$a^e\equiv \prod^{k-1}_{i=0}{x_i^{e_i}} ({\rm mod}\ n)$。</p><p>代碼如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sam</span><span class="params">(a,e,n)</span>:</span></span><br><span class="line">    k=len(bin(e))<span class="number">-2</span></span><br><span class="line">    remainder=<span class="number">1</span></span><br><span class="line">    x=a </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(k): </span><br><span class="line">        <span class="keyword">if</span> bin(e)[-i<span class="number">-1</span>]==<span class="string">"1"</span>: </span><br><span class="line">            remainder*=x </span><br><span class="line">        x=x**<span class="number">2</span>%n </span><br><span class="line">    <span class="keyword">return</span> remainder%n</span><br></pre></td></tr></table></figure><h2 id="解密"><a href="#解密" class="headerlink" title="解密"></a>解密</h2><p>由$c\equiv m^e({\rm mod}\ n)$可證$c^d\equiv m({\rm mod}\ n)$，下給出證明過程：</p><p>知$ed\equiv1({\rm mod}\ φ(n))$，因此有$ed-1=lφ(n),(l\in\mathbb N_+)$；</p><p>由Euler定理，有$c^d\equiv m^{ed}\equiv m^{lφ(n)+1}\equiv m\cdot (m^{φ(n)})^l\equiv m\cdot 1^l\equiv m({\rm mod}\ n)$，得證。</p><p>因此，如果已知$(n,d,c)$，結合Square-and-Multiply算法即可得到原文$m$，代碼如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rsa_1</span><span class="params">(n,d,c)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> sam(c,d,n)</span><br></pre></td></tr></table></figure><p>同理，如果已知$(p,q,e,c)$，結合擴展Euclidean算法和Square-and-Multiply算法也可得到原文$m$，代碼如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rsa_2</span><span class="params">(p,q,e,c)</span>:</span></span><br><span class="line">    φ=(p<span class="number">-1</span>)*(q<span class="number">-1</span>)</span><br><span class="line">    d=eea(e,φ)[<span class="number">1</span>]%φ <span class="comment">#Ensure d&gt;0</span></span><br><span class="line">    n=p*q</span><br><span class="line">    <span class="keyword">return</span> sam(c,d,n)</span><br></pre></td></tr></table></figure><p>這是因為由$φ(n) = (p-1)(q-1)$和$ed\equiv1({\rm mod}\ φ(n))$可知$de+kφ(n) =1(k\in\mathbb Z) $，對$(e,φ(n))$使用擴展Euclidean算法即可得$d$，又由$c^d\equiv m({\rm mod}\ n)$可知對$(c,d,n)$使用Square-and-Multiply算法即可得$m$（此處也說明$d$必須是正數）。</p><h2 id="例題"><a href="#例題" class="headerlink" title="例題"></a>例題</h2><p>對密文$c$在RSA中進行解密，已知</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">p=<span class="number">92848022024833655041372304737256052921065477715975001419347548380734496823522565044177931242947122534563813415992433917108481569319894167972639736788613656007853719476736625612543893748136536594494005487213485785676333621181690463942417781763743640447405597892807333854156631166426238815716390011586838580891</span></span><br><span class="line">q=<span class="number">149600854933825512159828331527177109689118555212385170831387365804008437367913613643959968668965614270559113472851544758183282789643129469226548555150464780229538086590498853718102052468519876788192865092229749643546710793464305243815836267024770081889047200172952438000587807986096107675012284269101785114471</span></span><br><span class="line">e=<span class="number">4099852173630681822722339660229701793484497077549023050739406744299194740794285841565894857183257305962091658478256403457898496259755474199072635097327398971990092224918103250375455707498928712201945370461644425637423044616348028546654820134532012544433519158531485300462390097592776352017667386632661678681500542766835469056490039928380877979712159080905348869475217939844173751698241442662611990406492300411900572847532884748092860563495914734527293634873292356463076178294881900968373918292064527855306925898818421646057616238873254251939953144948550922456255743607156013509822605943382352582252129366170771186337</span></span><br><span class="line">c=<span class="number">1965004133006974659995314560167723896560162823992014763466676295156568780181324759118466356116827422439409513865820570400810380977333397895810023254515182242123244875173658899005048988942666876614798046351776061310094809679938914368938218289806790724992660151078718864505196754907261135221257146114289875149015431301569207527108638684989789729747097766650481983822742788958528594215002940645806662061041825912562593269329369550470854629711422167160350497882132054038403027493105855840606846063029571758386220434189610971724518330438082401592895354255430599515214166039595157639322144199213475742435020500518884278854</span></span><br></pre></td></tr></table></figure><p>使用代碼</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(tsa_2(p,q,e,c))</span><br></pre></td></tr></table></figure><p>可得</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">m=<span class="number">6307076265101868022401168220914091002094923647543913608078494521549403802210173444891094505706734673093765283572976861935581726849816923593651509857540611964713018709162664925976240947063856932023113689107118569968804329173281583483592095382533613111762918421362278333322916021933519728291798749842494918068962745956079827474452589542646246101220774107235973703726237733253085312380677531524226610656535104841419537111452876626825419473934925741346089252331195249707094812401729770078951956524070871949864300367817846976007250758036392548367298788322489841149673899984125317729640492807125318100997973696848942216291</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot;
        
      
    
    </summary>
    
    
      <category term="技術" scheme="https://c0mm1e.github.io/categories/%E6%8A%80%E8%A1%93/"/>
    
    
      <category term="Python" scheme="https://c0mm1e.github.io/tags/Python/"/>
    
      <category term="算法" scheme="https://c0mm1e.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="密碼學" scheme="https://c0mm1e.github.io/tags/%E5%AF%86%E7%A2%BC%E5%AD%B8/"/>
    
  </entry>
  
</feed>
